---
---

<div class="bg-white rounded-2xl shadow-xl border border-gray-200/60 p-8 max-w-md mx-auto">
  <div class="text-center mb-6">
    <div class="w-16 h-16 bg-gradient-to-br from-orange-500 via-red-500 to-pink-500 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg">
      <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"/>
      </svg>
    </div>
    <h2 class="text-2xl font-bold bg-gradient-to-r from-orange-600 via-red-600 to-pink-600 bg-clip-text text-transparent mb-2">
      Código QR
    </h2>
    <p class="text-gray-600 text-sm">
      Escanea para acceder a CalorSmart
    </p>
  </div>

  <!-- Contenedor del QR -->
  <div class="bg-gray-50 rounded-xl p-6 mb-6">
    <div id="qr-container" class="flex justify-center items-center min-h-[200px]">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500"></div>
    </div>
  </div>

  <!-- URL -->
  <div class="text-center mb-6">
    <p class="text-xs text-gray-500 mb-2">URL de destino:</p>
    <p class="text-sm font-mono bg-gray-100 px-3 py-2 rounded-lg text-gray-700 break-all">
      https://appconsumo.vercel.app/
    </p>
  </div>

  <!-- Botones de acción -->
  <div class="flex flex-col sm:flex-row gap-3">
    <button 
      id="download-qr" 
      class="flex-1 bg-gradient-to-r from-orange-500 via-red-500 to-pink-500 text-white px-4 py-3 rounded-lg font-semibold text-sm hover:shadow-lg transition-all duration-200 flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed"
      disabled
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>
      <span>Descargar QR</span>
    </button>
    
    <button 
      id="copy-url" 
      class="flex-1 bg-white border-2 border-gray-200 text-gray-700 px-4 py-3 rounded-lg font-semibold text-sm hover:bg-gray-50 hover:border-gray-300 transition-all duration-200 flex items-center justify-center space-x-2"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
      </svg>
      <span>Copiar URL</span>
    </button>
  </div>
</div>

<script>
  // @ts-ignore
  import QRCode from 'qrcode';
  import { toast } from './Toast.ts';

  document.addEventListener('DOMContentLoaded', async () => {
    const qrContainer = document.getElementById('qr-container');
    const downloadBtn = document.getElementById('download-qr') as HTMLButtonElement;
    const copyBtn = document.getElementById('copy-url');
    const appUrl = 'https://appconsumo.vercel.app/';

    try {
      // Generar QR como SVG
      const qrSvg = await QRCode.toString(appUrl, {
        type: 'svg',
        width: 200,
        margin: 2,
        color: {
          dark: '#1f2937', // gray-800
          light: '#ffffff'
        },
        errorCorrectionLevel: 'M'
      });

      if (qrContainer) {
        qrContainer.innerHTML = qrSvg;
        downloadBtn.disabled = false;
      }

      // Función para descargar QR
      downloadBtn?.addEventListener('click', async () => {
        try {
          // Generar QR como PNG para descarga
          const qrDataUrl = await QRCode.toDataURL(appUrl, {
            width: 400,
            margin: 2,
            color: {
              dark: '#1f2937',
              light: '#ffffff'
            },
            errorCorrectionLevel: 'M'
          });

          // Crear enlace de descarga
          const link = document.createElement('a');
          link.download = 'CalorSmart-QR.png';
          link.href = qrDataUrl;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          toast.success('QR descargado exitosamente');
        } catch (error) {
          console.error('Error al descargar QR:', error);
          toast.error('Error al descargar el QR');
        }
      });

      // Función para copiar URL
      copyBtn?.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(appUrl);
          toast.success('URL copiada al portapapeles');
        } catch (error) {
          console.error('Error al copiar URL:', error);
          toast.error('Error al copiar la URL');
        }
      });

    } catch (error) {
      console.error('Error al generar QR:', error);
      if (qrContainer) {
        qrContainer.innerHTML = `
          <div class="text-center text-red-500">
            <svg class="w-12 h-12 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"/>
            </svg>
            <p class="text-sm">Error al generar QR</p>
          </div>
        `;
      }
      toast.error('Error al generar el código QR');
    }
  });
</script> 